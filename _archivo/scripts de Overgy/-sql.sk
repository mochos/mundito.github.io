#>    __   ____ __     ____ ____ _  _ __   ____ _  _ ____ __   
#>   /__\ ( ___(  ) __(  _ (_  _( \/ /__\ (  _ ( \/ ( ___(  )  
#>  /(__)\ )__) )(_(___)(_) _)(_ \  /(__)\ )   /\  / )__) )(__ 
#> (__)(__(____(____) (____(____) \(__)(__(_)\_) \/ (____(____)
#   ______                   _    _______                     _                  
#  |  ___ \                 | |  (_______)               _   (_)                 
#  | | _ | |_   _  ___  ____| |   _____ ___  ____   ____| |_  _  ___  ____   ___ 
#  | || || | | | |/___)/ _  | |  |  ___/ _ \|  _ \ / ___|  _)| |/ _ \|  _ \ /___)
#  | || || | |_| |___ | | | | |  | |  | |_| | | | ( (___| |__| | |_| | | | |___ |
#  |_||_||_|\__  (___/ \_|| |_|  |_|   \___/|_| |_|\____)\___|_|\___/|_| |_(___/ 
#          (____/         |_|                                                    
# %
#Script de MYSQL system pour les BDD skript
#Création AelDivarvel le 04/03/2016
#Copyright: Eternal
#Modificaton: Proutassiers
#Pre-Requis: skript2.2,Skquery
#A faire: 
#Update: Englobement de toutes les BDD pour skript le 17/04/2016
# Aide: Le 'playername' peut être définit sur 0, le 'type' doit être le type de la variable pour être parsé ensuite (array, text ou location)

#~  #-------------------------------------------------------------------------------------------------------------------
#~ 	#			######################################
#~ 	#			#          '[EXEMPLES/DOC]'          #
#~ 	#			######################################
#~  #-------------------------------------------------------------------------------------------------------------------
#~ 		set {_table} to "variables"
#~ 		set {_base} to "Hub_Economy"
#~ 		set {_varname} to "teste"
#~ 		set {_playername} to "0"
#~ 		set {_type} to "array"
#~ 		set {_name} to name of player
#~ 		'/!\ ATTENTION: Le type peut soit être "array" ou bien "location" ou "text".'
#~ 		'Le reste DEVRA être enregistré sous forme texte brut. (ex: les items)'
#~ 	   '---------------------------------------------------------------------------------------------------------'
#~ 						  ---------------------------------------------
#~ 						 [       Pour envoyer un array                 ]
#~ 						  ---------------------------------------------
#~ 		add "test1" to {_array::*}
#~ 		add "test2" to {_array::*}
#~ 		add "test3" to {_array::*}
#~ 		add "test4" to {_array::*}
#~ 		EnvoiSQL("variables", "Hub_Economy", "teste", "0", "text", {_array::*})   <- TEXT comme type pour (re)redéfinir un array
#~ 						  ---------------------------------------------
#~ 						 [   Pour rajouter une variable dans un array  ]
#~ 						  ---------------------------------------------
#~ 		set {_variable_simple} to "blah"
#~ 		EnvoiSQL("variables", "Hub_Economy", "teste", "0", "array", {_variable_simple})   <- ARRAY comme type pour rajouter à un array
#~ 						  ---------------------------------------------
#~ 						 [       Pour envoyer une variable simple      ]
#~ 						  ---------------------------------------------
#~ 		set {_variable_simple} to "blah"
#~ 		EnvoiSQL("variables", "Hub_Economy", "teste", "0", "text", {_variable_simple})
#~ 						  ---------------------------------------------
#~ 						 [       Pour retirer un texte d'un array      ]
#~ 						  ---------------------------------------------
#~ 		RemoveSQLarray("variables","Hub_Shoplist","Nom_Variable","Texte à virer du array",0) <- 1 si tu veut virer tout, 0 si tu veut en virer qu'un
#~ 						  ---------------------------------------------
#~ 						 [       Pour envoyer une location             ]
#~ 						  ---------------------------------------------
#~ 		set {_location} to "%location of player%"
#~ 		EnvoiSQL("variables", "Hub_Economy", "teste", "0", "location", {_location})
#~ 						  ---------------------------------------------
#~ 						 [       Pour DELETE une variable              ]
#~ 						  ---------------------------------------------
#~ 		RemoveSQL({_table}, {_base}, {_varname})
#~ 						  ---------------------------------------------
#~ 						 [       Pour récupérer une variable           ]
#~ 						  ---------------------------------------------
#~ 		'/!\ ATTENTION: Le GetSQL va toujours mettre tout dans un array, que Ã§a soit une location ou un texte simple'
#~ 		'A toi de le parser comme tu le désire ensuite, le X Y Z de la location sera dans les index 1 2 et 3 par exemple.'
#~ 		'Ne pas hésiter à enregistrer un item sous la forme "1xGold_Block" par exemple, puis le "split" ou faire des "replace all ".." with "" in {_var}" '
#~ 	   '---------------------------------------------------------------------------------------------------------'
#~ 		set {_getResult::*} to GetSQL({_table},{_base},{_varname})
#~ 		broadcast "%{_getResult::*}%"


#~  #-------------------------------------------------------------------------------------------------------------------
#~ 	#			######################################
#~ 	#			#          '[DEBUT Options]'         #
#~ 	#			######################################
#~  #-------------------------------------------------------------------------------------------------------------------

script options:
	$ init com.mysql.jdbc.Driver
	$ db url jdbc:mysql://158.69.117.100:3306/?autoReconnect=true
	$ db username m1_288
	$ db password fbf3ef3b57

#~  #-------------------------------------------------------------------------------------------------------------------
#~ 	#			######################################
#~ 	#			#         '[Création tables]'        #
#~ 	#			######################################
#~  #-------------------------------------------------------------------------------------------------------------------

on load:
	update "CREATE TABLE IF NOT EXISTS Game_rewards.variables (`Id` int not null auto_increment primary key,`varname` varchar(255),`Playername` varchar(255),`type` varchar(255),`value` varchar(1000))"
	update "CREATE TABLE IF NOT EXISTS Hub_chat.variables (`Id` int not null auto_increment primary key,`varname` varchar(255),`Playername` varchar(255),`type` varchar(255),`value` varchar(1000))"
	update "CREATE TABLE IF NOT EXISTS Hub_stats_players.variables (`Id` int not null auto_increment primary key,`varname` varchar(255),`Playername` varchar(255),`type` varchar(255),`value` varchar(1000))"
	update "CREATE TABLE IF NOT EXISTS Hub_Player.variables (`Id` int not null auto_increment primary key,`varname` varchar(255),`Playername` varchar(255),`type` varchar(255),`value` varchar(1000))"
	update "CREATE TABLE IF NOT EXISTS Hub_Economy.variables (`Id` int not null auto_increment primary key,`varname` varchar(255),`Playername` varchar(255),`type` varchar(255),`value` varchar(1000))"
	update "CREATE TABLE IF NOT EXISTS Hub_Shoplist.variables (`Id` int not null auto_increment primary key,`varname` varchar(255),`Playername` varchar(255),`type` varchar(255),`value` varchar(1000))"


#~  #-------------------------------------------------------------------------------------------------------------------
#~ 	#			#############################################
#~ 	#			#   '[Fonction EnvoiSQL (INSERT/UPDATE)]'   #-> EnvoiSQL({_table}, {_base}, {_varname}, {_playername}, {_type}, {_value})
#~ 	#			#############################################
#~  #-------------------------------------------------------------------------------------------------------------------

function EnvoiSQL(table:text, base:text, varname:text, playername:text, type:text, value:texts):
	set {_type2} to "%{_type}%"
	
	loop {_value::*}:
		if {_valueParsed} is set:
			set {_valueParsed} to "%{_valueParsed}%].::.[%loop-value%"
			set {_type2} to "array"
		else:
			set {_valueParsed} to "%loop-value%"
	replace all "'" with "''" in {_valueParsed}
	if {_type} is "location":
		replace all "x: " with "" in {_valueParsed}
		replace all ", y: " with "/" in {_valueParsed}
		replace all ", z: " with "/" in {_valueParsed}
	set {_SetResult::*} to objects in column "value" from result of query "SELECT * FROM %{_base}%.%{_table}% WHERE varname = '%{_varname}%'"
	set {_SetResult2::*} to objects in column "varname" from result of query "SELECT * FROM %{_base}%.%{_table}% WHERE varname = '%{_varname}%'"
					
	if {_type} is "array":
		if {_SetResult::*} is set:
			set {_Old_Value} to {_SetResult::1}
			set {_New_Value} to "%{_Old_Value}%].::.[%{_valueParsed}%"
			set {_valueParsed} to {_New_Value}
		else:
			set {_New_Value} to "%{_valueParsed}%"
			set {_valueParsed} to {_New_Value}
	set {_GetResult} to false
	loop {_SetResult2::*}:
		If loop-value is {_varname}:
			set {_GetResult} to true
	If {_GetResult} is false:
		update "INSERT INTO %{_base}%.%{_table}% (`varname`,`Playername`,`type`,`value`) VALUES ('%{_varname}%', '%{_playername}%', '%{_type2}%', '%{_valueParsed}%')"
	else:
		update "UPDATE %{_base}%.%{_table}% SET `value` = '%{_valueParsed}%' WHERE `%{_table}%`.`varname` ='%{_varname}%'"

#~  #-------------------------------------------------------------------------------------------------------------------
#~ 	#			#############################################
#~ 	#			#   '[Fonction RemoveSQL (DELETE)]'         #-> RemoveSQL({_table}, {_base}, {_varname})
#~ 	#			#############################################
#~  #-------------------------------------------------------------------------------------------------------------------

function RemoveSQL(table:text, base:text, varname:text):
	set {_SetResult::*} to objects in column "varname" from result of query "SELECT * FROM %{_base}%.%{_table}% WHERE varname = '%{_varname}%'"
	set {_GetResult} to false
	loop {_SetResult::*}:
		If loop-value is {_varname}:
			set {_GetResult} to true
	If {_GetResult} is true:
		update "DELETE FROM %{_base}%.%{_table}% WHERE varname = '%{_varname}%'"
	else:
		loop all players:
			if loop-player has permission "MYSQL.ADMIN":
				send "Impossible, table/base/donnée introuvable. (Table: %{_table}%, BDD: %{_base}%, Varname: %{_varname}%" to loop-player

#~  #-------------------------------------------------------------------------------------------------------------------
#~ 	#			#############################################
#~ 	#			# '[Fonction RemoveSQLarray (valeur array)]'#-> RemoveSQL({_table}, {_base}, {_varname}, {_Num_0_ou_1)
#~ 	#			#############################################
#~  #-------------------------------------------------------------------------------------------------------------------

function RemoveSQLarray(table:text, base:text, varname:text, value:text, all:number):
	set {_SetResult::*} to objects in column "value" from result of query "SELECT * FROM %{_base}%.%{_table}% WHERE varname = '%{_varname}%'"
	set {_SetResult2::*} to objects in column "varname" from result of query "SELECT * FROM %{_base}%.%{_table}% WHERE varname = '%{_varname}%'"
	set {_GetResult} to false
	loop {_SetResult2::*}:
		If loop-value is {_varname}:
			set {_GetResult} to true
	set {_Value_Old} to {_SetResult::1}
	If {_GetResult} is true:
		if {_all} is equal to 1:
			replace all "%{_value}%].::.[" with "" in {_Value_Old}
			replace all "%{_value}%" with "" in {_Value_Old}
	
			update "UPDATE %{_base}%.%{_table}% SET `value` = '%{_Value_Old}%' WHERE `%{_table}%`.`varname` ='%{_varname}%'"
		else:
			set {_GetResultParsed::*} to {_Value_Old} split at "].::.["
			remove {_value} from {_GetResultParsed::*}
			loop {_GetResultParsed::*}:
				if {_New_Value} is not set:
					set {_New_Value} to loop-value
				else:
					set {_New_Value} to "%{_New_Value}%].::.[%loop-value%"
			update "UPDATE %{_base}%.%{_table}% SET `value` = '%{_New_Value}%' WHERE `%{_table}%`.`varname` ='%{_varname}%'"
	else:
		loop all players:
			if loop-player has permission "MYSQL.ADMIN":
				send "Impossible, table/base/donnée introuvable. (Table: %{_table}%, BDD: %{_base}%, Varname: %{_varname}%" to loop-player
#~  #-------------------------------------------------------------------------------------------------------------------
#~ 	#			#############################################
#~ 	#			#      '[Fonction GetSQL (SELECT)]'         #-> set {_getResult::*} to GetSQL({_table},{_base},{_varname})
#~ 	#			#############################################
#~  #-------------------------------------------------------------------------------------------------------------------

function GetSQL(table:text, base:text, varname:text) :: texts:
	set {_TypeResult::*} to objects in column "type" from result of query "SELECT * FROM %{_base}%.%{_table}% WHERE varname = '%{_varname}%'"
	set {_SetResult::*} to objects in column "value" from result of query "SELECT * FROM %{_base}%.%{_table}% WHERE varname = '%{_varname}%'"
	delete {_TypeResultGet}
	loop {_TypeResult::*}:
		If loop-value is set:
			set {_TypeResultGet} to loop-value
	
	If {_TypeResultGet} is set:
		if {_TypeResultGet} is "text":
			delete {_GetResult}
			loop {_SetResult::*}:
				If loop-value is set:
					set {_GetResult} to loop-value
			set {_GetResult} to {_GetResult} parsed as text
			if {_GetResult} is set:
				return {_GetResult}
				stop trigger
			else:
				return {_GetResult}
				stop trigger
			
		else if {_TypeResultGet} is "array":
			delete {_GetResult}
			loop {_SetResult::*}:
				If loop-value is set:
					set {_GetResult} to loop-value
			if {_GetResult} is not set:
				return {_GetResult}
				stop trigger
			set {_GetResultParsed::*} to {_GetResult} split at "].::.["
			if {_GetResultParsed::*} is not set:
				add {_GetResult} to {_GetResultParsed::*}
			return {_GetResultParsed::*}
			stop trigger
			
		else if {_TypeResultGet} is "location":
			delete {_GetResult}
			loop {_SetResult::*}:
				If loop-value is set:
					set {_GetResult} to loop-value
			if {_GetResult} is not set:
				return {_GetResult}
				stop trigger
			set {_GetResultParsed::*} to {_GetResult} split at "/"
			if {_GetResultParsed::*} is not set:
				add {_GetResult} to {_GetResultParsed::*}
			return {_GetResultParsed::*}
			stop trigger

	delete {_GetResult}
	loop {_SetResult::*}:
		If loop-value is set:
			set {_GetResult} to loop-value
	return {_GetResult}

command /adminsql:
	permission: skript.admin
	trigger:
		set {_algo::*} to GetSQL("swreloaded_player", "m1_288", "player_id")
		send "%{_algo::*}%"