# YML

function setVarYML(to: text , value: text , file: text):
	#to = Quoi modifier ?
	#value = a set
	#file = fichier a modifier
	
	set yaml value "%{_to}%" from file "%{_file}%.yml" to "%{_value}%"

function setListYML(to: text , value: text , file: text):
	#to = Quoi modifier ?
	#value = a set
	#file = fichier a modifier
	
	set yaml value "%{_to}%" from file "%{_file}%.yml" to "%{_value}%"
	add "%{_value}%" to yaml list "%{_to}%" from file "%{_file}%.yml"
	
function getVarYML(research: text , file: text) :: text:
	#r = research
	#f = file
	
	set {_g} to yaml value {_research} from file "%{_file}%.yml"
	return {_g}
	
function getListYML(research: text , file: text) :: texts:
	#research = a récupéré
	#file = file
	
	set {_g::*} to yaml list "%{_research}%" from file "%{_file}%.yml"
	return {_g::*}

# Region Tools by RezzedUp
# v 2.0
# ---
# REQUIRES:
# - Skript 2.2
# - SkQuery

options:
    directory: ../../WorldGuard/worlds/
    
#   FUNCTION:   loadRegionsFromFile()
#   PURPOSE:    Load all regions of a world to memory.
#   ARGUMENTS:  ("<world>")
#   RETURNS:    Nothing
#   EXAMPLE:    
#               loadRegionsFromFile("myWorld")

function loadRegionsFromFile(world: text):
    set {wg::%{_world}%} to {_world}
    set {_regions::*} to yaml nodes "regions" from "{@directory}%{_world}%/regions.yml"
    loop {_regions::*}:
        set {_flags::*} to yaml nodes "regions.%loop-value%.flags" from "{@directory}%{_world}%/regions.yml"
        set {wg::%{_world}%::%loop-value%} to loop-value
        loop {_flags::*}:
            set {wg::%{_world}%::%loop-value-1%::%loop-value-2%} to yaml value "regions.%loop-value-1%.flags.%loop-value-2%" from "../../WorldGuard/worlds/%{_world}%/regions.yml"

#   FUNCTION:   unloadRegion()
#   PURPOSE:    Remove a specific region from memory.
#   ARGUMENTS:  ("<world>", "<region name>")
#   RETURNS:    Nothing
#   EXAMPLE:    
#               unloadREgion("myWorld", "myRegion")

function unloadRegion(world: text, region: text):
    delete {wg::%{_world}%::%{_region}%::*}
    delete {wg::%{_world}%::%{_region}%}
    
#   FUNCTION:   loadRegionFromFile()
#   PURPOSE:    Load a specific region of a world to memory.
#   ARGUMENTS:  ("<world>", "<region name>")
#   RETURNS:    Nothing
#   EXAMPLE:    
#               loadRegionFromFile("myWorld", "myRegion")
    
function loadRegionFromFile(world: text, region: text):
    set {_regions::*} to yaml nodes "regions" from "{@directory}%{_world}%/regions.yml"
    unloadRegion({_world}, {_region})
    loop {_regions::*}:
        send "%loop-value% & %{_region}%?" to console
        if loop-value is {_region}:
            set {_flags::*} to yaml nodes "regions.%loop-value%.flags" from "{@directory}%{_world}%/regions.yml"
            set {wg::%{_world}%::%loop-value%} to loop-value
            loop {_flags::*}:
                set {wg::%{_world}%::%loop-value-1%::%loop-value-2%} to yaml value "regions.%loop-value-1%.flags.%loop-value-2%" from "../../WorldGuard/worlds/%{_world}%/regions.yml"
            stop

#   FUNCTION:   reloadAllRegions()
#   PURPOSE:    Reload all regions into memory.
#   ARGUMENTS:  None
#   RETURNS:    Nothing
#   EXAMPLE:    
#               reloadAllRegions()

function reloadAllRegions(~: boolean=true):
    delete {wg::*}
    loop all worlds:
        set {_world} to "%loop-world%"
        loadRegionsFromFile({_world})
        
#   FUNCTION:   unloadAllRegions()
#   PURPOSE:    Remove all regions from memory.
#   ARGUMENTS:  None
#   RETURNS:    Nothing
#   EXAMPLE:    
#               unloadAllRegions()

function unloadAllRegions(~: boolean=true):
    delete {wg::*}

on script load:
    reloadAllRegions()
    
on script unload:
    unloadAllRegions()
    
#   |                    |   #
#   |   FLAG FUNCTIONS   |   #
#   |                    |   #

#   FUNCTION:   regionHasFlag()
#   PURPOSE:    Check if a region has a flag set.
#   ARGUMENTS:  ("<world>", "<region name>", "<flag name>")
#   RETURNS:    True or False
#   EXAMPLE:    
#               if regionHasFlag("myWorld", "myRegion", "mob-spawning"):
#                   send "This region has a flag set for mob-spawning!" to player
    
function regionHasFlag(world: text, region: text, flag: text) :: boolean:
    if {wg::%{_world}%::%{_region}%::%{_flag}%} is set:
        return true
    else:
        return false
        
#   FUNCTION:   regionGetFlagValue()
#   PURPOSE:    Get the value of a region's flag.
#   ARGUMENTS:  ("<world>", "<region name>", "<flag name>")
#   RETURNS:    Text
#   EXAMPLE:    
#               set {_greeting} to regionGetFlagValue("myWorld", "myRegion", "greeting")
#               broadcast "myRegion says: %{_greeting}%"
        
function regionGetFlagValue(world: text, region: text, flag: text) :: text:
    return {wg::%{_world}%::%{_region}%::%{_flag}%}
    
# Detecting when to reload a region
    
on command:
    sender is a player
    if command is "region" or "rg":
        set {_world} to "%world of player%"
        set {_arg::*} to arguments split at " "
        if {_arg::1} is "flag" or "f" or "define" or "d" or "create":
            if {_arg::2} is set:
                set {_rg} to {_arg::2}
                # worldguard writes to regions.yml every 30 seconds
                wait 30 seconds
                loadRegionFromFile({_world}, {_rg})
        else if {_arg::1} is "delete" or "remove":
            if {_arg::2} is set:
                set {_rg} to {_arg::2}
                wait 5 ticks
                unloadRegion({_world}, {_rg})
                
# Debug command to check if everything has loaded correctly
    
command /loadedregions:
    permission: is.op
    trigger:
        send "&aCurrently loaded WorldGuard regions:" to player
        loop {wg::*}:
            loop {wg::%loop-value%::*}:
                if {wg::%loop-value-1%::%loop-value-2%::*} is set:
                    loop {wg::%loop-value-1%::%loop-value-2%::*}:
                        send "%loop-index-1% &m->&r &6%loop-value-2%&8 ::&7 %loop-index-3% = %loop-value-3%" to player
                else:
                    send "%loop-index-1% &m->&r &6%loop-value-2%" to player